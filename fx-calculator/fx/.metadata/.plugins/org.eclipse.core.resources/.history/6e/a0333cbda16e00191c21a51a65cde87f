package com.anz.fx.calculator;

import static com.anz.fx.calculator.cache.FxCache.CURRENCY_MAP;
import static com.anz.fx.calculator.cache.FxCache.CURRENCY_MATRIX;
import static com.anz.fx.calculator.cache.FxCache.CURRENCY_PRECISION_MAP;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Service;

import com.anz.fx.calculator.constant.FeedEnum;
import com.anz.fx.calculator.exception.FxException;
import com.anz.fx.calculator.util.FxValidation;

@Service
public class FxCalculatorService {

	static Logger logger = LogManager.getLogger(FxCalculatorService.class);

	/**
	 * @param inputString
	 * @return
	 */
	public static String convertCurrency(String inputString) {

		// Replace empty string
		String currencyString = inputString.replace(" ", "");
		String base = currencyString.substring(0, 3);
		String term = currencyString.substring(currencyString.length() - 3);
		String currencyValueString = currencyString.substring(3, currencyString.indexOf('i'));

		logger.info("Base - " + base);
		logger.info("Term - " + term);
		logger.info("Base Currency - " + currencyValueString);

		 
		String resultString = null;

		try {
			FxValidation.validate(base, term, currencyValueString);
			
			Double currency = Double.valueOf(currencyValueString);
			/*int baseIndex = CURRENCY_MAP.get(base);
			int termIndex = CURRENCY_MAP.get(term);
			

			if (!FeedEnum.contains(CURRENCY_MATRIX[baseIndex][termIndex])) {

				FxValidation.validateCrossCurrency(base, term, CURRENCY_MATRIX[baseIndex][termIndex]);
				result = FxCalculator.convertFromBaseToTerm(base, CURRENCY_MATRIX[baseIndex][termIndex], currency);
				result = FxCalculator.convertFromBaseToTerm(CURRENCY_MATRIX[baseIndex][termIndex], term, result);

			} else {
				result = FxCalculator.convertFromBaseToTerm(base, term, currency);
			}*/
			
			
			
			String selectedFeed = null;
			FeedEnum feed = null;
			String tmpBase=base;
			double result = currency;
			while(feed == null) {
				 selectedFeed = CURRENCY_MATRIX[CURRENCY_MAP.get(tmpBase)][CURRENCY_MAP.get(term)];
				 feed = FeedEnum.findByAbbreviation(selectedFeed);
				result = FxCalculator.convertFromBaseToTerm(tmpBase, selectedFeed, result);
				tmpBase = selectedFeed;
			}
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			int precison = CURRENCY_PRECISION_MAP.get(term);
			String tempResultString = String.format("%." + precison + "f", result);

			resultString = base + " " + currency + " = " + tempResultString + " " + term;
		} catch (FxException e) {
			resultString = e.getMessage();
			logger.error(e.getMessage(), e);
		}

		return resultString;

	}
}
